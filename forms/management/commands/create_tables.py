from django.core.management.base import BaseCommand
from django.db import connection
from django.core.management import call_command

class Command(BaseCommand):
    help = 'Crea las tablas necesarias en Oracle Database'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('CREANDO TABLAS EN ORACLE DATABASE'))
        self.stdout.write('=' * 60)
        
        # Primero, intentar hacer las migraciones
        try:
            self.stdout.write('\n1. Creando migraciones...')
            call_command('makemigrations', 'forms')
            self.stdout.write(self.style.SUCCESS('✓ Migraciones creadas'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'✗ Error creando migraciones: {e}'))
        
        # Aplicar migraciones
        try:
            self.stdout.write('\n2. Aplicando migraciones...')
            call_command('migrate')
            self.stdout.write(self.style.SUCCESS('✓ Migraciones aplicadas'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'✗ Error aplicando migraciones: {e}'))
            
            # Si falla, intentar crear las tablas manualmente
            self.stdout.write('\n3. Intentando crear tablas manualmente...')
            self.create_tables_manually()
    
    def create_tables_manually(self):
        """Crear tablas manualmente si las migraciones fallan"""
        with connection.cursor() as cursor:
            # Verificar si la tabla forms_customuser existe
            try:
                cursor.execute("SELECT COUNT(*) FROM forms_customuser")
                self.stdout.write(self.style.SUCCESS('✓ Tabla forms_customuser ya existe'))
            except:
                # Crear tabla forms_customuser
                self.stdout.write('Creando tabla forms_customuser...')
                try:
                    cursor.execute("""
                        CREATE TABLE forms_customuser (
                            id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                            password VARCHAR2(128) NOT NULL,
                            last_login TIMESTAMP NULL,
                            is_superuser NUMBER(1) DEFAULT 0 NOT NULL CHECK (is_superuser IN (0,1)),
                            username VARCHAR2(150) UNIQUE NOT NULL,
                            first_name VARCHAR2(150),
                            last_name VARCHAR2(150),
                            email VARCHAR2(254),
                            is_staff NUMBER(1) DEFAULT 0 NOT NULL CHECK (is_staff IN (0,1)),
                            is_active NUMBER(1) DEFAULT 1 NOT NULL CHECK (is_active IN (0,1)),
                            date_joined TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
                            rol VARCHAR2(20) DEFAULT 'contratista' NOT NULL,
                            activo NUMBER(1) DEFAULT 1 NOT NULL CHECK (activo IN (0,1)),
                            fecha_ultimo_acceso TIMESTAMP NULL
                        )
                    """)
                    self.stdout.write(self.style.SUCCESS('✓ Tabla forms_customuser creada'))
                except Exception as e:
                    self.stdout.write(self.style.ERROR(f'✗ Error creando tabla forms_customuser: {e}'))
            
            # Verificar si la tabla forms_formularioglobal existe
            try:
                cursor.execute("SELECT COUNT(*) FROM forms_formularioglobal")
                self.stdout.write(self.style.SUCCESS('✓ Tabla forms_formularioglobal ya existe'))
            except:
                # Crear tabla forms_formularioglobal
                self.stdout.write('Creando tabla forms_formularioglobal...')
                try:
                    cursor.execute("""
                        CREATE TABLE forms_formularioglobal (
                            id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                            trabajo VARCHAR2(200) NOT NULL,
                            municipio VARCHAR2(100),
                            departamento VARCHAR2(100),
                            regional VARCHAR2(100),
                            direccion VARCHAR2(200),
                            alimentador VARCHAR2(100),
                            estado_actual VARCHAR2(20) DEFAULT 'contratista' NOT NULL,
                            activo NUMBER(1) DEFAULT 1 NOT NULL CHECK (activo IN (0,1)),
                            creado_por_id NUMBER REFERENCES forms_customuser(id),
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
                            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
                        )
                    """)
                    self.stdout.write(self.style.SUCCESS('✓ Tabla forms_formularioglobal creada'))
                except Exception as e:
                    self.stdout.write(self.style.ERROR(f'✗ Error creando tabla forms_formularioglobal: {e}'))
            
            # Crear tablas de Django si no existen
            django_tables = [
                ('django_session', """
                    CREATE TABLE django_session (
                        session_key VARCHAR2(40) PRIMARY KEY,
                        session_data CLOB NOT NULL,
                        expire_date TIMESTAMP NOT NULL
                    )
                """),
                ('django_content_type', """
                    CREATE TABLE django_content_type (
                        id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                        app_label VARCHAR2(100) NOT NULL,
                        model VARCHAR2(100) NOT NULL,
                        UNIQUE (app_label, model)
                    )
                """),
                ('auth_permission', """
                    CREATE TABLE auth_permission (
                        id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                        name VARCHAR2(255) NOT NULL,
                        content_type_id NUMBER NOT NULL REFERENCES django_content_type(id),
                        codename VARCHAR2(100) NOT NULL,
                        UNIQUE (content_type_id, codename)
                    )
                """),
                ('auth_group', """
                    CREATE TABLE auth_group (
                        id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                        name VARCHAR2(150) UNIQUE NOT NULL
                    )
                """),
                ('auth_group_permissions', """
                    CREATE TABLE auth_group_permissions (
                        id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                        group_id NUMBER NOT NULL REFERENCES auth_group(id),
                        permission_id NUMBER NOT NULL REFERENCES auth_permission(id),
                        UNIQUE (group_id, permission_id)
                    )
                """),
                ('forms_customuser_groups', """
                    CREATE TABLE forms_customuser_groups (
                        id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                        customuser_id NUMBER NOT NULL REFERENCES forms_customuser(id),
                        group_id NUMBER NOT NULL REFERENCES auth_group(id),
                        UNIQUE (customuser_id, group_id)
                    )
                """),
                ('forms_customuser_user_permissions', """
                    CREATE TABLE forms_customuser_user_permissions (
                        id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                        customuser_id NUMBER NOT NULL REFERENCES forms_customuser(id),
                        permission_id NUMBER NOT NULL REFERENCES auth_permission(id),
                        UNIQUE (customuser_id, permission_id)
                    )
                """),
                ('django_admin_log', """
                    CREATE TABLE django_admin_log (
                        id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                        action_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
                        object_id CLOB NULL,
                        object_repr VARCHAR2(200) NOT NULL,
                        action_flag NUMBER(5) NOT NULL CHECK (action_flag >= 0),
                        change_message CLOB NOT NULL,
                        content_type_id NUMBER NULL REFERENCES django_content_type(id),
                        user_id NUMBER NOT NULL REFERENCES forms_customuser(id)
                    )
                """),
                ('django_migrations', """
                    CREATE TABLE django_migrations (
                        id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                        app VARCHAR2(255) NOT NULL,
                        name VARCHAR2(255) NOT NULL,
                        applied TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
                    )
                """)
            ]
            
            for table_name, create_sql in django_tables:
                try:
                    cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                    self.stdout.write(f'✓ Tabla {table_name} ya existe')
                except:
                    try:
                        cursor.execute(create_sql)
                        self.stdout.write(self.style.SUCCESS(f'✓ Tabla {table_name} creada'))
                    except Exception as e:
                        self.stdout.write(self.style.WARNING(f'⚠ No se pudo crear {table_name}: {e}'))
        
        self.stdout.write(self.style.SUCCESS('\n✅ PROCESO COMPLETADO'))
        self.stdout.write('\nAhora ejecuta los siguientes comandos:')
        self.stdout.write('1. python manage.py migrate --fake-initial')
        self.stdout.write('2. python manage.py createsuperuser')
